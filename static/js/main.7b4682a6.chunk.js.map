{"version":3,"sources":["components/CardComponentStyles.ts","components/CardDetails.tsx","components/StyledCardsContainer.ts","components/CardsContainer.tsx","components/FormSelect.tsx","components/InputFields.tsx","components/StyledFormSelect.ts","components/FormControl.tsx","components/StyledPagesContainer.ts","components/PagesContainer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["StyledCardComponent","styled","div","props","slideMargin","visibleSlides","zoomFactor","useStyles","makeStyles","root","width","media","height","backgroundSize","CardDetails","character","classes","Card","className","CardMedia","image","CardContent","Typography","gutterBottom","variant","name","color","status","origin","location","species","episode","length","map","ep","Chip","style","margin","size","label","replace","StyledCardsContainer","StyledCard","CardsContainer","useState","open","setOpen","active","setActive","charactersArray","arr","Dialog","onClose","onClick","handleOpen","src","alt","id","FormSelect","items","React","item","setItem","InputLabel","value","onChange","event","console","log","target","InputFields","setValue","handleChange","TextField","placeholder","defaultValue","StyledSelectContainer","selects","inputfFields","StyledButtonWrapper","Form","submit","onSubmit","select","Button","type","StyledPagesContainer","PagesContainer","numeredLink","pagesTotal","link","num","push","createLinks","pages","count","StyledControlPanel","StyledApp","removeLastSymbol","substring","App","data","setData","info","setInfo","getData","a","fetch","json","results","useEffect","next","prev","ButtonGroup","aria-label","disabled","preventDefault","document","getElementById","gender","query","queryOptions","createQuery","callback","str","Object","entries","p","toLowerCase","makeInputValuesToString","fromEntries","filter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render"],"mappings":"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","file":"static/js/main.7b4682a6.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\ntype Props = {\n  zoomFactor: number;\n  slideMargin: number;\n  visibleSlides: number;\n  className: string;\n};\n\nexport const StyledCardComponent = styled.div<Props>`\n  margin: 0 ${(props) => props.slideMargin}px;\n  transition: transform 500ms ease;\n  border-radius: 20px;\n  cursor: pointer;\n  width: 100%;\n  height: 100%;\n  box-sizing: border-box;\n  display: flex;\n  transform: scale(1);\n  user-select: none;\n\n  flex: 0 0\n    calc(\n      100% / ${(props) => props.visibleSlides} -\n        ${(props) => props.slideMargin * 2}px\n    );\n\n  img {\n    height: 100%;\n    width: 100%;\n    border-radius: 1.5vw;\n    box-sizing: border-box;\n  }\n\n  :hover {\n    transform: scale(${(props) => props.zoomFactor / 100 + 1}) !important;\n  }\n\n  :hover ~ * {\n    transform: translateX(${(props) => props.zoomFactor / 2 + \"%\"}) !important;\n  }\n\n  &.left {\n    transform-origin: left;\n\n    :hover ~ * {\n      transform: translateX(${(props) => props.zoomFactor + \"%\"}) !important;\n    }\n  }\n\n  &.right {\n    transform-origin: right;\n\n    :hover ~ * {\n      transform: translateX(0%) !important;\n    }\n  }\n`;\n","// Components\nimport { Chip } from \"@material-ui/core\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport React from \"react\";\nimport { Character } from \"../types/CharacterType\";\n\nconst useStyles = makeStyles({\n  root: {\n    width: 320,\n  },\n  media: {\n    height: 250,\n    backgroundSize: \"cover\",\n  },\n});\n\ntype Props = {\n  character: Character;\n};\n\nconst CardDetails: React.FC<Props> = ({ character }) => {\n  const classes = useStyles();\n  const episodeUrl = \"https://rickandmortyapi.com/api/episode/\";\n  return (\n    <Card className={classes.root}>\n      <CardMedia className={classes.media} image={character.image} />\n      <CardContent>\n        <Typography gutterBottom variant=\"h5\">\n          Name: {character.name}\n        </Typography>\n        <Typography gutterBottom color=\"textSecondary\">\n          Status: {character.status}\n          <br />\n          Origin: {character.origin.name}\n          <br />\n          Location: {character.location.name}\n          <br />\n          Status: {character.status}\n          <br />\n          Species: {character.species}\n          <br />\n          Episodes total: {character.episode.length}\n          <br />\n        </Typography>\n\n        <Typography color=\"textSecondary\">Episodes:</Typography>\n\n        {character.episode.map((ep: any) => (\n          <Chip key={ep} style={{ margin: 3 }} size=\"small\" label={ep.replace(episodeUrl, \"\")} />\n        ))}\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default CardDetails;\n","import styled from \"styled-components\";\n\nexport const StyledCardsContainer = styled.div`\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n  grid-gap: 20px;\n  //max-width: 1300px;\n  padding: 20px;\n  margin: 15px;\n  overflow: hidden;\n  position: relative;\n  background: #60cbe6;\n  border-radius: 0.5vw;\n`;\n\nexport const StyledCard = styled.div`\n  transition: transform 500ms ease;\n  border-radius: 0.5vw;\n  cursor: pointer;\n  width: 100%;\n  height: 100%;\n  box-sizing: border-box;\n  display: flex;\n  flex-direction: column;\n  transform: scale(1);\n  user-select: none;\n  border: solid;\n  background-color: white;\n  img {\n    height: 100%;\n    width: 100%;\n    border-radius: 0.2vw 0.2vw 0 0;\n    box-sizing: border-box;\n  }\n  h1 {\n  }\n  :hover {\n    transform: scale(${() => 5 / 100 + 1}) !important;\n  }\n\n  :hover ~ * {\n    transform: translateX(${() => 5 / 2 + \"%\"}) !important;\n  }\n\n  &.left {\n    transform-origin: left;\n\n    :hover ~ * {\n      transform: translateX(${() => 15 + \"%\"}) !important;\n    }\n  }\n\n  &.right {\n    transform-origin: right;\n\n    :hover ~ * {\n      transform: translateX(0%) !important;\n    }\n  }\n`;\n","import { Dialog } from \"@material-ui/core\";\nimport React, { useState } from \"react\";\nimport \"../App.css\";\nimport { Character } from \"../types/CharacterType\";\nimport { StyledCardComponent } from \"./CardComponentStyles\";\nimport CardDetails from \"./CardDetails\";\nimport { StyledCard, StyledCardsContainer } from \"./StyledCardsContainer\";\n\ntype IProps = {\n  arr: Character[];\n};\n\nconst CardsContainer: React.FC<IProps> = (props) => {\n  const [open, setOpen] = useState(false);\n  const [active, setActive] = useState<Character>({} as Character);\n\n  const handleOpen = (character: Character) => {\n    setOpen(true);\n    setActive(character);\n  };\n  const charactersArray = props.arr;\n\n  if (!StyledCardComponent) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div>\n      <Dialog\n        onClose={() => {\n          setOpen(false);\n        }}\n        open={open}\n      >\n        <CardDetails character={active} />\n      </Dialog>\n\n      <StyledCardsContainer>\n        {charactersArray.map((character) => (\n          <StyledCard\n            key={character.id}\n            onClick={() => {\n              handleOpen(character);\n            }}\n          >\n            <img src={character.image} alt=\"Card name\" />\n            <h1>{character.name}</h1>\n          </StyledCard>\n        ))}\n      </StyledCardsContainer>\n    </div>\n  );\n};\n\nexport default CardsContainer;\n","import { InputLabel } from \"@material-ui/core\";\nimport React from \"react\";\n\ntype Options = {\n  name: string;\n  id: string;\n  label: string;\n\n  items: Item[];\n};\ntype Item = {\n  value: string | undefined;\n  label: string;\n};\n\nexport const FormSelect = (props: Options) => {\n  const { name, id, label, items } = props;\n  const [item, setItem] = React.useState(\"\");\n\n  const handleChange = (event: React.ChangeEvent<{ value: unknown }>) => {\n    console.log(event.target.value);\n    setItem(event.target.value as string);\n  };\n\n  return (\n    <>\n      <InputLabel id=\"Label\">{label}</InputLabel>\n      <select name={name} id={id} value={item} onChange={handleChange}>\n        {items.map((item) => (\n          <option key={item.label} value={item.value}>\n            {item.value}\n          </option>\n        ))}\n      </select>\n    </>\n  );\n};\n","import { TextField } from \"@material-ui/core\";\nimport React from \"react\";\n\ntype Options = {\n  items: Item[];\n};\ntype Item = {\n  label: string;\n  placeholder: string;\n  id: string;\n};\n\nexport const InputFields = (props: Options) => {\n  const { items } = props;\n  const [value, setValue] = React.useState(\"\");\n\n  const handleChange = (event: React.ChangeEvent<{ value: string }>) => {\n    let value = event.target.value;\n\n    setValue(value);\n  };\n\n  return (\n    <>\n      {items.map((item) => (\n        <TextField\n          key={item.id}\n          placeholder={item.placeholder}\n          id={item.id}\n          defaultValue={value}\n          onChange={handleChange}\n        />\n      ))}\n    </>\n  );\n};\n","import styled from \"styled-components\";\n\nexport const StyledSelectContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-around;\n  width: 100%;\n`;\n","import { Button } from \"@material-ui/core\";\nimport styled from \"styled-components\";\nimport { FormSelect } from \"./FormSelect\";\nimport { InputFields } from \"./InputFields\";\nimport { StyledSelectContainer } from \"./StyledFormSelect\";\nconst genders = [\n  {\n    value: \"\",\n    label: \"None\",\n  },\n  {\n    value: \"female\",\n    label: \"female\",\n  },\n  {\n    value: \"male\",\n    label: \"male\",\n  },\n  {\n    value: \"genderless\",\n    label: \"genderless\",\n  },\n  {\n    value: \"unknown\",\n    label: \"unknown\",\n  },\n];\nconst statuses = [\n  {\n    value: \"\",\n    label: \"None\",\n  },\n  {\n    value: \"alive\",\n    label: \"alive\",\n  },\n  {\n    value: \"dead\",\n    label: \"dead\",\n  },\n  {\n    value: \"unknown\",\n    label: \"unknown\",\n  },\n];\nconst selects = [\n  { name: \"gender\", id: \"selectGender\", label: \"Gender\", value: \"\", items: genders },\n  { name: \"status\", id: \"selectStatus\", label: \"Status\", value: \"\", items: statuses },\n];\nconst inputfFields = [\n  { label: \"Input name\", placeholder: \"Rick\", id: \"Name\" },\n  { label: \"Input species\", placeholder: \"Human\", id: \"Species\" },\n  { label: \"Input type\", placeholder: \"Input type\", id: \"Type\" },\n];\n\nconst StyledButtonWrapper = styled.div`\n  margin-top: 10px;\n`;\n\nexport const Form = (props: { onSubmit: (event: React.FormEvent) => void }) => {\n  const submit = props.onSubmit;\n  return (\n    <>\n      <form onSubmit={submit}>\n        <InputFields items={inputfFields} />\n        <StyledSelectContainer>\n          {selects.map((select) => (\n            <FormSelect key={select.id} name={select.name} id={select.id} label={select.label} items={select.items} />\n          ))}\n        </StyledSelectContainer>\n        <StyledButtonWrapper>\n          <Button type=\"submit\" variant=\"contained\" color=\"secondary\">\n            SEARCH\n          </Button>\n        </StyledButtonWrapper>\n      </form>\n    </>\n  );\n};\n","import styled from \"styled-components\";\n\nexport const StyledPagesContainer = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  width: 100%;\n  margin: auto;\n`;\n","import { Typography } from \"@material-ui/core\";\nimport React from \"react\";\nimport \"../App.css\";\nimport { StyledPagesContainer } from \"./StyledPagesContainer\";\n\ninterface IProps {\n  count: number;\n  next: string | null;\n  pages: number;\n  prev: string | null;\n}\nconst baseLink = `https://rickandmortyapi.com/api/character?page=`;\n\nconst PagesContainer: React.FC<IProps> = (props) => {\n  const pagesTotal: string[] = [];\n  let numeredLink: string;\n  const createLinks = (link: string, num: number) => {\n    while (num > 0) {\n      numeredLink = `${link}${num}`;\n      num--;\n      pagesTotal.push(numeredLink);\n    }\n    return;\n  };\n  createLinks(baseLink, props.pages);\n\n  return (\n    <StyledPagesContainer>\n      <Typography gutterBottom variant=\"h5\">\n        Total characters: {props.count}\n      </Typography>\n      <Typography gutterBottom variant=\"h5\">\n        Total pages: {props.pages}\n      </Typography>\n    </StyledPagesContainer>\n  );\n};\n\nexport default PagesContainer;\n","import { Button, ButtonGroup } from \"@material-ui/core\";\nimport React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport CardsContainer from \"./components/CardsContainer\";\nimport { Form } from \"./components/FormControl\";\nimport PagesContainer from \"./components/PagesContainer\";\nimport { Character } from \"./types/CharacterType\";\n\ntype Info = {\n  count: number;\n  next: string;\n  pages: number;\n  prev: string;\n};\n\ntype CharacterQuery = {\n  name?: string;\n  status?: string;\n  species?: string;\n  type?: string;\n  gender?: string;\n};\nconst StyledControlPanel = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\nconst StyledApp = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  max-width: 100%;\n`;\n\nconst baseLink = `https://rickandmortyapi.com/api/character?page=`;\nconst linkForFiltering = `https://rickandmortyapi.com/api/character/?`;\n\nconst createQuery = (query: string, queryOptions: void) => {\n  let filteredQuery = query + queryOptions;\n  return filteredQuery;\n};\n\nconst removeLastSymbol = (props: string) => {\n  let str;\n  str = props.substring(0, props.length - 1);\n  return str;\n};\nconst makeInputValuesToString = (props: object, callback: (arg: string) => void) => {\n  let str = \"\";\n\n  for (const [p, value] of Object.entries(props)) {\n    str += `${p}=${value.toLowerCase()}&`;\n  }\n  return callback(str);\n};\n\nconst removeEmptyInputs = (props: CharacterQuery) => {\n  let empty = null || undefined || 0;\n\n  let filteredObject = Object.fromEntries(Object.entries(props).filter(([key, value]) => value!.length !== empty));\n\n  return filteredObject;\n};\n\nlet charlink = \"http://rickandmortyapi.com/api/character/?name=rick&status=alive\";\nconst App: React.FC = () => {\n  const [data, setData] = useState<Character[]>([]);\n  const [info, setInfo] = useState<Info>();\n\n  const getData = async (link: string) => {\n    console.log(link);\n    const data = await (await fetch(`${link}`)).json();\n\n    setData(data.results);\n    setInfo(data.info);\n  };\n\n  useEffect(() => {\n    getData(baseLink);\n  }, []);\n  const onSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    let name = (document.getElementById(\"Name\") as HTMLInputElement).value;\n    let species = (document.getElementById(\"Species\") as HTMLInputElement).value;\n    let type = (document.getElementById(\"Type\") as HTMLInputElement).value;\n    let gender = (document.getElementById(\"selectGender\") as HTMLSelectElement).value;\n    let status = (document.getElementById(\"selectStatus\") as HTMLSelectElement).value;\n    let inputs = { name, species, type, gender, status };\n    let filteredInputValuesObject = removeEmptyInputs(inputs);\n    let queryOptions = makeInputValuesToString(filteredInputValuesObject, removeLastSymbol);\n\n    let query = createQuery(linkForFiltering, queryOptions);\n    console.log(query);\n    getData(query);\n  };\n  if (!info) {\n    return <div>Loading...</div>;\n  }\n  const { count, next, pages, prev } = { ...info };\n\n  return (\n    <StyledApp>\n      <StyledControlPanel>\n        <PagesContainer count={count} next={next} pages={pages} prev={prev} />\n\n        <ButtonGroup size=\"large\" aria-label=\"large outlined primary button group\">\n          {\" \"}\n          <Button\n            color=\"secondary\"\n            disabled={!prev}\n            onClick={() => {\n              getData(prev);\n            }}\n          >\n            Previous\n          </Button>\n          <Button\n            color=\"secondary\"\n            disabled={!next}\n            onClick={() => {\n              getData(next);\n            }}\n          >\n            Next\n          </Button>\n        </ButtonGroup>\n        <Form onSubmit={onSubmit} />\n      </StyledControlPanel>\n      <CardsContainer arr={data} />\n    </StyledApp>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <App />,\n\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}